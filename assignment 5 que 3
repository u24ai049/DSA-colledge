#include<iostream>
using namespace std;

// Node structure to represent an element in the stack
struct Node {
    int data;
    Node* next;
};

// Stack class implementation using a linked list
class Stack {
private:
    Node* top;  // Pointer to the top of the stack

public:
    Stack() {
        top = nullptr;  // Initialize stack as empty
    }

    // Function to push an element onto the stack
    void push(int val) {
        Node* newNode = new Node;
        newNode->data = val;
        newNode->next = top;  // Make the new node point to the current top
        top = newNode;  // Update the top pointer to the new node
        cout << "Pushed " << val << " onto the stack." << endl;
    }

    // Function to pop an element from the stack
    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow! Cannot pop from empty stack." << endl;
            return -1;  // Return an invalid value
        }

        Node* temp = top;
        int poppedValue = temp->data;  // Store the top element's value
        top = top->next;  // Update the top to the next node
        delete temp;  // Delete the old top node
        return poppedValue;
    }

    // Function to peek the top element of the stack
    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
            return -1;  // Return an invalid value
        }
        return top->data;  // Return the data of the top node
    }

    // Function to check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Function to check if the stack is full (Linked list stack is never full unless system memory is exhausted)
    bool isFull() {
        return false;  // Linked list-based stack is never full unless memory is exhausted
    }
};

int main() {
    Stack s;

    s.push(10);
    s.push(20);
    s.push(30);

    cout << "Top element is: " << s.peek() << endl;

    cout << "Popped element: " << s.pop() << endl;
    cout << "Popped element: " << s.pop() << endl;

    s.push(40);
    cout << "Top element is: " << s.peek() << endl;

    return 0;
}
