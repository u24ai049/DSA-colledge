#include <iostream>
using namespace std;

class node {
public:
    int data;
    node* next;
    node(int data1) {
        data = data1;
        next = nullptr;
    }
};

// Function to display the circular linked list
void display(node* head) {
    if (head == nullptr) {
        cout << "List is empty." << endl;
        return;
    }

    node* temp = head;
    do {
        cout << temp->data << " -> ";
        temp = temp->next;
    } while (temp != head);
    cout << "(back to head)" << endl;
}

// Insert an element at the beginning of the list
node* insertAtBegin(node* head, int val) {
    node* temp = new node(val);

    if (head == nullptr) {
        temp->next = temp;
        return temp;  // Circular list with one element
    }

    node* tail = head;
    while (tail->next != head) {
        tail = tail->next;
    }

    tail->next = temp;
    temp->next = head;

    return temp;  // New head
}

// Insert an element at the end of the list
node* insertAtEnd(node* head, int val) {
    node* temp = new node(val);

    if (head == nullptr) {
        temp->next = temp;
        return temp;  // Circular list with one element
    }

    node* tail = head;
    while (tail->next != head) {
        tail = tail->next;
    }

    tail->next = temp;
    temp->next = head;

    return head;  // Head remains unchanged
}

// Insert an element at a specific position
node* insertAtPosition(node* head, int val, int pos) {
    if (pos <= 0) {
        cout << "Invalid position!" << endl;
        return head;
    }

    if (pos == 1) {
        return insertAtBegin(head, val);  // Insert at the beginning
    }

    node* temp = new node(val);
    node* current = head;
    int count = 1;

    while (count < pos - 1 && current->next != head) {
        current = current->next;
        count++;
    }

    if (current->next == head && count < pos - 1) {
        cout << "Position out of range!" << endl;
        delete temp;
        return head;
    }

    temp->next = current->next;
    current->next = temp;

    return head;
}

// Delete an element from the beginning of the list
node* deleteAtBegin(node* head) {
    if (head == nullptr) {
        cout << "List is empty." << endl;
        return nullptr;
    }

    if (head->next == head) {
        delete head;
        return nullptr;
    }

    node* tail = head;
    while (tail->next != head) {
        tail = tail->next;
    }

    node* temp = head;
    tail->next = head->next;
    head = head->next;

    delete temp;
    return head;
}

// Delete an element from a specific position
node* deleteAtPosition(node* head, int pos) {
    if (head == nullptr || pos <= 0) {
        cout << "Invalid position or list is empty!" << endl;
        return head;
    }

    if (pos == 1) {
        return deleteAtBegin(head);  // Delete the first element
    }

    node* current = head;
    int count = 1;

    while (count < pos - 1 && current->next != head) {
        current = current->next;
        count++;
    }

    if (current->next == head) {
        cout << "Position out of range!" << endl;
        return head;
    }

    node* temp = current->next;
    current->next = current->next->next;

    delete temp;
    return head;
}

// Delete the last element of the list
node* deleteAtEnd(node* head) {
    if (head == nullptr) {
        cout << "List is empty." << endl;
        return nullptr;
    }

    if (head->next == head) {
        delete head;
        return nullptr;
    }

    node* current = head;
    while (current->next->next != head) {
        current = current->next;
    }

    node* temp = current->next;
    current->next = head;

    delete temp;
    return head;
}

int main() {
    node* head = nullptr;
    int choice, val, pos;

    do {
        cout << "1. Insert at the beginning" << endl;
        cout << "2. Insert at the end" << endl;
        cout << "3. Insert at specific position" << endl;
        cout << "4. Delete from the beginning" << endl;
        cout << "5. Delete from specific position" << endl;
        cout << "6. Delete from the end" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the value to insert at the beginning: ";
                cin >> val;
                head = insertAtBegin(head, val);
                break;
            case 2:
                cout << "Enter the value to insert at the end: ";
                cin >> val;
                head = insertAtEnd(head, val);
                break;
            case 3:
                cout << "Enter the position and value to insert: ";
                cin >> pos >> val;
                head = insertAtPosition(head, val, pos);
                break;
            case 4:
                head = deleteAtBegin(head);
                break;
            case 5:
                cout << "Enter the position to delete: ";
                cin >> pos;
                head = deleteAtPosition(head, pos);
                break;
            case 6:
                head = deleteAtEnd(head);
                break;
            case 0:
                cout << "Exiting program!" << endl;
                break;
            default:
                cout << "Invalid choice!" << endl;
        }

        cout << "Current List: ";
        display(head);

    } while (choice != 0);

    return 0;
}
