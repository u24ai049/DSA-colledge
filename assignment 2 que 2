#include <stdio.h>
#include <stdlib.h>

// Define the structure to hold two integer pointers
struct ArrayData {
    int *arr1;  // Pointer for the first array
    int *arr2;  // Pointer for the second array
};

// Function to read an array using pointers
void readArray(int *arr, int size) {
    for (int i = 0; i < size; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", (arr + i));  // Using pointer notation to input elements
    }
}

// Function to copy and modify the second array based on the conditions
void processArrays(int *arr1, int *arr2, int size) {
    for (int i = 0; i < size; i++) {
        if (i % 2 == 0) {  // Even indices (0-based)
            *(arr2 + i) = *(arr1 + i);  // Copy the element from arr1 to arr2
        } else {  // Odd indices (0-based)
            if (i - 1 >= 0 && i + 1 < size) {
                *(arr2 + i) = (*(arr1 + i - 1)) * (*(arr1 + i + 1));  // Product of adjacent elements
            }
        }
    }
}

// Function to print an array using pointers
void printArray(int *arr, int size) {
    for (int i = 0; i < size; i++) {
        printf("Element %d: %d\n", i + 1, *(arr + i));  // Using pointer notation to print elements
    }
}

int main() {
    int n;

    // Step 1: Get the size of the array from the user
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);

    // Step 2: Allocate memory for the structure
    struct ArrayData *data = (struct ArrayData *)malloc(sizeof(struct ArrayData));

    // Step 3: Allocate memory for both arrays inside the structure
    data->arr1 = (int *)malloc(n * sizeof(int));  // Allocate space for arr1
    data->arr2 = (int *)malloc(n * sizeof(int));  // Allocate space for arr2

    // Step 4: Read the input for the first array
    printf("Enter elements for the first array:\n");
    readArray(data->arr1, n);

    // Step 5: Process the arrays: copy and modify the second array
    processArrays(data->arr1, data->arr2, n);

    // Step 6: Print the second array
    printf("\nElements of the second array after processing:\n");
    printArray(data->arr2, n);

    // Step 7: Free the allocated memory
    free(data->arr1);
    free(data->arr2);
    free(data);

    return 0;
}
